// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Role enum
enum Role {
  PATIENT
  DOCTOR
}
enum Gender {
  MALE
  FEMALE
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  role          Role?           @default(PATIENT)
  image         String?
  phone         String?         @unique
  address       String?
  gender        Gender?         @default(MALE)
  dateOfBirth   DateTime?        
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // Relations
  patientRecords        PatientRecord[] // For patients
  appointmentsAsPatient Appointment[]   @relation("PatientAppointments") // Appointments as patient
  appointmentsAsDoctor  Appointment[]   @relation("DoctorAppointments") // Appointments as doctor
  doctorProfile         DoctorProfile? // For doctors
  invoices              Invoice[] // Invoices for patients
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Doctor Profile (for dentists)
model DoctorProfile {
  id             String    @id @default(uuid())
  userId         String    @unique
  specialty      String
  qualifications String
  bio            String?
  photoUrl       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Patient Record (medical history, treatment plans)
model PatientRecord {
  id             String    @id @default(uuid())
  userId         String
  medicalHistory String?   // Text for allergies, conditions, etc.
  treatmentPlan  String?   // Text for planned procedures
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Dental Services (e.g., cleaning, implants)
model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int       // Duration in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  appointments Appointment[] // Services booked in appointments
}

// Appointments
model Appointment {
  id          String       @id @default(uuid())
  patientId   String
  doctorId    String
  serviceId   String
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  patient     User         @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor      User         @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  service     Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  invoice     Invoice?     // One invoice per appointment
}

// Appointment Status enum
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Invoices
model Invoice {
  id            String    @id @default(uuid())
  userId        String
  appointmentId String    @unique
  amount        Float
  status        InvoiceStatus @default(PENDING)
  issuedAt      DateTime  @default(now())
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

// Invoice Status enum
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}